# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gr.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLabel, QGridLayout, QPushButton
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
import keyboard


class Ui_Form(object):
    def setupUi(self, Form):

        Form.setObjectName("Form")
        Form.setFixedSize(800, 600)
        width = Form.frameGeometry().width()
        height = Form.frameGeometry().height()

        self.gridLayoutWidget = QtWidgets.QWidget(Form)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, width, height))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")

        self.gridLayout = QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setAlignment(Qt.AlignCenter)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.But_Up = QtWidgets.QPushButton(Form)
        self.But_Up.setGeometry(QtCore.QRect(360, 490, 81, 23))
        self.But_Up.setObjectName("pushButton_4")
        self.But_Left = QtWidgets.QPushButton(Form)
        self.But_Left.setGeometry(QtCore.QRect(300, 520, 81, 23))
        self.But_Left.setObjectName("pushButton_5")
        self.But_Right = QtWidgets.QPushButton(Form)
        self.But_Right.setGeometry(QtCore.QRect(420, 520, 81, 23))
        self.But_Right.setObjectName("pushButton_6")
        self.But_Down = QtWidgets.QPushButton(Form)
        self.But_Down.setGeometry(QtCore.QRect(360, 550, 81, 23))
        self.But_Down.setObjectName("pushButton_7")

        self.But_Up.setText("↑")
        self.But_Left.setText("←")
        self.But_Right.setText("→")
        self.But_Down.setText("↓")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.matrix = [['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'],
                  ['W', '.', '.', '.', '.', '.', '.', 'W'],
                  ['W', '.', '.', '.', 'B', '.', '.', 'W'],
                  ['W', '.', 'B', 'H', '.', '.', '.', 'W'],
                  ['W', '.', '.', '.', '.', '.', '.', 'W'],
                  ['W', '.', '.', '.', 'L', 'L', '.', 'W'],
                  ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']]
        self.position_box = [[3, 2], [2, 4]]
        self.location = [[5, 4], [5, 5]]
        self.position_player = [[3, 3]]

        for i in range(7):
            for j in range(8):
                if self.matrix[i][j] == 'B':
                    label = QLabel()
                    pixmap = QPixmap('images/crate9.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'W':
                    label = QLabel()
                    pixmap = QPixmap('images/wall2.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'H':
                    label = QLabel()
                    pixmap = QPixmap('images/hero.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'Q':
                    label = QLabel()
                    pixmap = QPixmap('images/crate10.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'L':
                    label = QLabel()
                    pixmap = QPixmap('images/loc.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)
        self.gridLayout.setSpacing(0)

        self.game()

    def update(self):
        self.count = 0
        
        for i in reversed(range(self.gridLayout.count())):
            self.gridLayout.itemAt(i).widget().deleteLater()

        for i in range(len(self.location)):
            self.matrix[self.location[i][0]][self.location[i][1]] = 'L'

        for i in range(len(self.position_box)):
            self.matrix[self.position_box[i][0]][self.position_box[i][1]] = 'B'

        for i in range(len(self.location)):
            if self.matrix[self.location[i][0]][self.location[i][1]] == 'B':
                self.count += 1
                self.matrix[self.location[i][0]][self.location[i][1]] = 'Q'

        self.matrix[self.position_player[0][0]][self.position_player[0][1]] = 'H'

        for i in range(7):
            for j in range(8):
                if self.matrix[i][j] == 'B':
                    label = QLabel()
                    pixmap = QPixmap('images/crate9.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'W':
                    label = QLabel()
                    pixmap = QPixmap('images/wall2.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'H':
                    label = QLabel()
                    pixmap = QPixmap('images/hero.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'Q':
                    label = QLabel()
                    pixmap = QPixmap('images/crate10.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

                elif self.matrix[i][j] == 'L':
                    label = QLabel()
                    pixmap = QPixmap('images/loc.png')
                    label.setPixmap(pixmap)
                    self.gridLayout.addWidget(label, i, j)

        if self.count == len(self.location):
            print('Victory')



    def check_up(self):
        if (self.matrix[self.position_player[0][0] - 1][self.position_player[0][1]] == '.' or self.matrix[self.position_player[0][0] - 1][
            self.position_player[0][1]] == 'L'):
            self.matrix[self.position_player[0][0]][self.position_player[0][1]] = '.'
            self.position_player[0][0] = self.position_player[0][0] - 1

        elif (self.matrix[self.position_player[0][0] - 1][self.position_player[0][1]] == 'B' or self.matrix[self.position_player[0][0] - 1][
                    self.position_player[0][1]] == 'Q') and (self.matrix[self.position_player[0][0] - 2][self.position_player[0][1]] == '.' or self.matrix[self.position_player[0][0] - 2][
                    self.position_player[0][1]] == 'L'):
            for i in range(len(self.position_box)):
                if (self.position_player[0][0] - 1 == self.position_box[i][0]) and (self.position_player[0][1] == self.position_box[i][1]):
                    self.matrix[self.position_box[i][0]][self.position_box[i][1]] = '.'
                    self.position_box[i][0] = self.position_box[i][0] - 1
        self.update()

    def check_down(self):
        if (self.matrix[self.position_player[0][0] + 1][self.position_player[0][1]] == '.' or self.matrix[self.position_player[0][0] + 1][
            self.position_player[0][1]] == 'L'):
            self.matrix[self.position_player[0][0]][self.position_player[0][1]] = '.'
            self.position_player[0][0] = self.position_player[0][0] + 1

        elif (self.matrix[self.position_player[0][0] + 1][self.position_player[0][1]] == 'B' or self.matrix[self.position_player[0][0] + 1][
                    self.position_player[0][1]] == 'Q') and (self.matrix[self.position_player[0][0] + 2][self.position_player[0][1]] == '.' or self.matrix[self.position_player[0][0] + 2][
                    self.position_player[0][1]] == 'L'):
            for i in range(len(self.position_box)):
                if self.position_player[0][0] + 1 == self.position_box[i][0] and self.position_player[0][1] == self.position_box[i][1]:
                    self.matrix[self.position_box[i][0]][self.position_box[i][1]] = '.'
                    self.position_box[i][0] = self.position_box[i][0] + 1
        self.update()

    def check_left(self):
        if (self.matrix[self.position_player[0][0]][self.position_player[0][1] - 1] == '.' or self.matrix[self.position_player[0][0]][
            self.position_player[0][1] - 1] == 'L'):
            self.matrix[self.position_player[0][0]][self.position_player[0][1]] = '.'
            self.position_player[0][1] = self.position_player[0][1] - 1

        elif (self.matrix[self.position_player[0][0]][self.position_player[0][1] - 1] == 'B' or self.matrix[self.position_player[0][0]][
                    self.position_player[0][1] - 1] == 'Q') and (self.matrix[self.position_player[0][0]][self.position_player[0][1] - 2] == '.' or self.matrix[self.position_player[0][0]][
                    self.position_player[0][1] - 2] == 'L'):
            for i in range(len(self.position_box)):
                if self.position_player[0][0] == self.position_box[i][0] and self.position_player[0][1] - 1 == self.position_box[i][1]:
                    self.matrix[self.position_box[i][0]][self.position_box[i][1]] = '.'
                    self.position_box[i][1] = self.position_box[i][1] - 1
        self.update()

    def check_right(self):
        if (self.matrix[self.position_player[0][0]][self.position_player[0][1] + 1] == '.' or self.matrix[self.position_player[0][0]][
            self.position_player[0][1] + 1] == 'L'):
            self.matrix[self.position_player[0][0]][self.position_player[0][1]] = '.'
            self.position_player[0][1] = self.position_player[0][1] + 1

        elif (self.matrix[self.position_player[0][0]][self.position_player[0][1] + 1] == 'B' or self.matrix[self.position_player[0][0]][
                    self.position_player[0][1] + 1] == 'Q') and (self.matrix[self.position_player[0][0]][self.position_player[0][1] + 2] == '.' or self.matrix[self.position_player[0][0]][
                    self.position_player[0][1] + 2] == 'L'):
            for i in range(len(self.position_box)):
                if self.position_player[0][0] == self.position_box[i][0] and self.position_player[0][1] + 1 == self.position_box[i][1]:
                    self.matrix[self.position_box[i][0]][self.position_box[i][1]] = '.'
                    self.position_box[i][1] = self.position_box[i][1] + 1
        self.update()

    def game(self):
        keyboard.add_hotkey('w', lambda: self.check_up())
        keyboard.add_hotkey('s',lambda: self.check_down())
        keyboard.add_hotkey('a', lambda: self.check_left())
        keyboard.add_hotkey('d', lambda: self.check_right())
        self.But_Up.clicked.connect(lambda: self.check_up())
        self.But_Down.clicked.connect(lambda: self.check_down())
        self.But_Right.clicked.connect(lambda: self.check_right())
        self.But_Left.clicked.connect(lambda: self.check_left())

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())